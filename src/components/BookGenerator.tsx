import { useState } from 'react'
import { Button } from './ui/button'
import { ArrowRight, Sparkles, Download, Share2 } from 'lucide-react'

export function BookGenerator() {
  const [step, setStep] = useState(1)
  const [formData, setFormData] = useState({
    childName: '',
    age: '',
    theme: '',
    artStyle: '',
    customPrompt: ''
  })
  const [isGenerating, setIsGenerating] = useState(false)
  const [isDownloading, setIsDownloading] = useState(false)
  const [isSharing, setIsSharing] = useState(false)
  const [generatedBook, setGeneratedBook] = useState(null)

  const themes = [
    { id: 'adventure', name: 'Adventure', description: 'Exciting journeys and exploration' },
    { id: 'fantasy', name: 'Fantasy', description: 'Magic, dragons, and mythical creatures' },
    { id: 'space', name: 'Space', description: 'Astronauts, planets, and cosmic adventures' },
    { id: 'animals', name: 'Animals', description: 'Friendly creatures and nature stories' },
    { id: 'friendship', name: 'Friendship', description: 'Stories about making friends' },
    { id: 'learning', name: 'Learning', description: 'Educational and discovery themes' }
  ]

  const artStyles = [
    { id: 'watercolor', name: 'Watercolor', description: 'Soft, dreamy illustrations' },
    { id: 'cartoon', name: 'Cartoon', description: 'Fun, colorful cartoon style' },
    { id: 'realistic', name: 'Realistic', description: 'Detailed, lifelike artwork' },
    { id: 'vintage', name: 'Vintage', description: 'Classic storybook style' }
  ]

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleGenerate = async () => {
    setIsGenerating(true)
    // Simulate book generation
    setTimeout(() => {
      setGeneratedBook({
        title: `${formData.childName}'s ${formData.theme} Adventure`,
        pages: 12,
        coverUrl: 'https://images.unsplash.com/photo-1669823115182-8e7731ff79ea?w=400&h=600&fit=crop',
        previewPages: [
          'https://images.unsplash.com/photo-1697962176820-b52c00e311f1?w=400&h=600&fit=crop',
          'https://images.unsplash.com/photo-1579539447503-ec82f0aab843?w=400&h=600&fit=crop',
          'https://images.unsplash.com/photo-1689230053630-cb51e7b90fc1?w=400&h=600&fit=crop'
        ]
      })
      setIsGenerating(false)
      setStep(4)
    }, 3000)
  }

  const resetGenerator = () => {
    setStep(1)
    setFormData({
      childName: '',
      age: '',
      theme: '',
      artStyle: '',
      customPrompt: ''
    })
    setGeneratedBook(null)
  }

  const handleDownloadPDF = async () => {
    if (!generatedBook || isDownloading) return
    
    setIsDownloading(true)
    
    try {
      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // Create a simple PDF-like content for demonstration
      const bookContent = `
        ${generatedBook.title}
        
        A personalized ${generatedBook.pages}-page story created just for ${formData.childName}
        
        Theme: ${formData.theme}
        Art Style: ${formData.artStyle}
        Age: ${formData.age}
        
        This is a demo book generated by CreateBookAI Clone.
        In a real implementation, this would be a full PDF with illustrations.
      `
      
      // Create a blob with the content
      const blob = new Blob([bookContent], { type: 'text/plain' })
      const url = URL.createObjectURL(blob)
      
      // Create download link
      const link = document.createElement('a')
      link.href = url
      link.download = `${generatedBook.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      // Clean up
      URL.revokeObjectURL(url)
      
      // Show success message
      alert('Book downloaded successfully! In a real app, this would be a full PDF with illustrations.')
    } catch (error) {
      console.error('Download failed:', error)
      alert('Download failed. Please try again.')
    } finally {
      setIsDownloading(false)
    }
  }

  const handleShareBook = async () => {
    if (!generatedBook || isSharing) return
    
    setIsSharing(true)
    
    const shareData = {
      title: generatedBook.title,
      text: `Check out this personalized children's book: "${generatedBook.title}" - A ${generatedBook.pages}-page story created just for ${formData.childName}!`,
      url: window.location.href
    }
    
    try {
      // Use Web Share API if available
      if (navigator.share) {
        await navigator.share(shareData)
      } else {
        // Fallback: copy to clipboard
        const shareText = `${shareData.text}\n\nCreate your own at: ${shareData.url}`
        await navigator.clipboard.writeText(shareText)
        alert('Book details copied to clipboard! Share it with your friends.')
      }
    } catch (error) {
      console.error('Sharing failed:', error)
      // Final fallback: show share text in alert
      const shareText = `${shareData.text}\n\nCreate your own at: ${shareData.url}`
      prompt('Copy this text to share your book:', shareText)
    } finally {
      setIsSharing(false)
    }
  }

  return (
    <section id="generator" className="py-20 bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Create Your Book
          </h2>
          <p className="text-xl text-gray-600">
            Follow these simple steps to create a personalized children's book
          </p>
        </div>

        {/* Progress Steps */}
        <div className="flex justify-center mb-12">
          <div className="flex items-center space-x-4">
            {[1, 2, 3, 4].map((stepNum) => (
              <div key={stepNum} className="flex items-center">
                <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium ${
                  step >= stepNum 
                    ? 'bg-primary-500 text-white' 
                    : 'bg-gray-200 text-gray-600'
                }`}>
                  {stepNum}
                </div>
                {stepNum < 4 && (
                  <div className={`w-12 h-1 mx-2 ${
                    step > stepNum ? 'bg-primary-500' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="bg-white rounded-2xl shadow-lg p-8">
          {/* Step 1: Basic Info */}
          {step === 1 && (
            <div className="space-y-6">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Tell us about your child</h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Child's Name
                </label>
                <input
                  type="text"
                  value={formData.childName}
                  onChange={(e) => handleInputChange('childName', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  placeholder="Enter your child's name"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Age
                </label>
                <select
                  value={formData.age}
                  onChange={(e) => handleInputChange('age', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                >
                  <option value="">Select age</option>
                  <option value="2-3">2-3 years</option>
                  <option value="4-5">4-5 years</option>
                  <option value="6-7">6-7 years</option>
                  <option value="8-9">8-9 years</option>
                  <option value="10+">10+ years</option>
                </select>
              </div>

              <Button 
                onClick={() => setStep(2)}
                disabled={!formData.childName || !formData.age}
                className="w-full"
                size="lg"
              >
                Next Step
                <ArrowRight className="ml-2 h-5 w-5" />
              </Button>
            </div>
          )}

          {/* Step 2: Theme Selection */}
          {step === 2 && (
            <div className="space-y-6">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Choose a theme</h3>
              
              <div className="grid md:grid-cols-2 gap-4">
                {themes.map((theme) => (
                  <div
                    key={theme.id}
                    onClick={() => handleInputChange('theme', theme.id)}
                    className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
                      formData.theme === theme.id
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-200 hover:border-primary-300'
                    }`}
                  >
                    <h4 className="font-semibold text-gray-900 mb-1">{theme.name}</h4>
                    <p className="text-sm text-gray-600">{theme.description}</p>
                  </div>
                ))}
              </div>

              <div className="flex space-x-4">
                <Button variant="outline" onClick={() => setStep(1)} className="flex-1">
                  Back
                </Button>
                <Button 
                  onClick={() => setStep(3)}
                  disabled={!formData.theme}
                  className="flex-1"
                >
                  Next Step
                  <ArrowRight className="ml-2 h-5 w-5" />
                </Button>
              </div>
            </div>
          )}

          {/* Step 3: Art Style & Custom Prompt */}
          {step === 3 && (
            <div className="space-y-6">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Choose art style</h3>
              
              <div className="grid md:grid-cols-2 gap-4 mb-6">
                {artStyles.map((style) => (
                  <div
                    key={style.id}
                    onClick={() => handleInputChange('artStyle', style.id)}
                    className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
                      formData.artStyle === style.id
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-200 hover:border-primary-300'
                    }`}
                  >
                    <h4 className="font-semibold text-gray-900 mb-1">{style.name}</h4>
                    <p className="text-sm text-gray-600">{style.description}</p>
                  </div>
                ))}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Custom Story Elements (Optional)
                </label>
                <textarea
                  value={formData.customPrompt}
                  onChange={(e) => handleInputChange('customPrompt', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  rows={3}
                  placeholder="Add any special details, favorite animals, or story elements..."
                />
              </div>

              <div className="flex space-x-4">
                <Button variant="outline" onClick={() => setStep(2)} className="flex-1">
                  Back
                </Button>
                <Button 
                  onClick={handleGenerate}
                  disabled={!formData.artStyle || isGenerating}
                  className="flex-1"
                >
                  {isGenerating ? (
                    <>
                      <Sparkles className="mr-2 h-5 w-5 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      Generate Book
                      <Sparkles className="ml-2 h-5 w-5" />
                    </>
                  )}
                </Button>
              </div>
            </div>
          )}

          {/* Step 4: Generated Book */}
          {step === 4 && generatedBook && (
            <div className="space-y-6">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Your book is ready!</h3>
              
              <div className="grid md:grid-cols-2 gap-8">
                <div>
                  <img
                    src={generatedBook.coverUrl}
                    alt="Book Cover"
                    className="w-full rounded-lg shadow-lg"
                  />
                </div>
                
                <div className="space-y-4">
                  <h4 className="text-xl font-bold text-gray-900">{generatedBook.title}</h4>
                  <p className="text-gray-600">
                    A personalized {generatedBook.pages}-page story created just for {formData.childName}
                  </p>
                  
                  <div className="space-y-3">
                    <Button 
                      onClick={handleDownloadPDF} 
                      disabled={isDownloading}
                      className="w-full" 
                      size="lg"
                    >
                      <Download className={`mr-2 h-5 w-5 ${isDownloading ? 'animate-spin' : ''}`} />
                      {isDownloading ? 'Preparing Download...' : 'Download PDF'}
                    </Button>
                    <Button 
                      onClick={handleShareBook} 
                      disabled={isSharing}
                      variant="outline" 
                      className="w-full" 
                      size="lg"
                    >
                      <Share2 className={`mr-2 h-5 w-5 ${isSharing ? 'animate-pulse' : ''}`} />
                      {isSharing ? 'Sharing...' : 'Share Book'}
                    </Button>
                  </div>
                </div>
              </div>

              <div>
                <h5 className="font-semibold text-gray-900 mb-3">Preview Pages</h5>
                <div className="grid grid-cols-3 gap-4">
                  {generatedBook.previewPages.map((pageUrl, index) => (
                    <img
                      key={index}
                      src={pageUrl}
                      alt={`Page ${index + 1}`}
                      className="w-full rounded-lg shadow-md"
                    />
                  ))}
                </div>
              </div>

              <Button variant="outline" onClick={resetGenerator} className="w-full">
                Create Another Book
              </Button>
            </div>
          )}
        </div>
      </div>
    </section>
  )
}